# General {{{
set -g default-terminal "tmux-256color"
set -sa terminal-overrides ",alacritty:RGB"
set -ga terminal-overrides ",*:Tc"
set -ga terminal-overrides ',*:Smulx=\E[4::%p1%dm'

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

setw -g xterm-keys on

set -sg escape-time 0

set -sg repeat-time 0

set -s focus-events on

set -g mouse on

set -q -g status-utf8 on

setw -q -g utf8 on

setw -g history-limit 500000

tmux_conf_copy_to_os_clipboard=true

set -g status-keys vi
set -g mode-keys vi

set -g status-position top
# }}}

# Display # {{{
set -g base-index 1

setw -g pane-base-index 1

set -g renumber-windows on
setw -g automatic-rename on

set -g set-titles on

set -g display-time 1000

set -g status-interval 10

set -g monitor-activity on
set -g visual-activity off

set -g status-left-length 30
set -g status-right-length 150

set-option -g status "on"

set-option -g pane-border-lines heavy
set-option -g popup-border-lines heavy

set-option -g status-style bg=colour0,fg=colour7

set-window-option -g window-status-style bg=colour8,fg=colour0

set-window-option -g window-status-activity-style bg=colour0,fg=colour7

set-window-option -g window-status-current-style bg=colour2,fg=colour0

# Set active pane border color
set-option -g pane-active-border-style bg=terminal,fg=colour3

# Set inactive pane border color
set-option -g pane-border-style bg=terminal,fg=colour8

set -g pane-border-format "\
#[fg=colour5, bg=colour0][ \
#[fg=colour15, bg=colour0]#P\
#[fg=colour5, bg=colour0] ][ \
#[fg=colour15, bg=colour0]#{pane_current_command}\
#[fg=colour5, bg=colour0] ][ \
#[fg=colour15, bg=colour0]#( ~/.config/tmux/scripts/pwd.sh #{pane_current_path})\
#[fg=colour5, bg=colour0] ]"

# Message info
set-option -g message-style bg=colour0,fg=colour15 # bg=bg2, fg=fg1

# Writing commands inactive
set-option -g message-command-style bg=colour0,fg=colour15 # bg=fg3, fg=bg1

# Pane number display
set-option -g display-panes-active-colour colour1 #fg2
set-option -g display-panes-colour colour2 #bg1

# Clock
set-window-option -g clock-mode-colour colour10

# Bell
set-window-option -g window-status-bell-style bg=colour1,fg=colour7 # bg=red, fg=bg

set-option -g status-left "\
#[fg=colour0, bg=colour8]#{?client_prefix,#[bg=colour11],}#{?client_prefix,#[fg=colour0],} tmux \
#[fg=colour15, bg=colour0]#{?window_zoomed_flag, üîç,} \
#[fg=colour5, bg=colour0]#S "

set-window-option -g window-status-current-format "\
#[fg=colour0, bg=colour2]\
#[fg=colour0, bg=colour2] #I \
#[fg=colour0, bg=colour2] #W \
#[fg=colour2, bg=colour0]"

set-window-option -g window-status-format "\
#[fg=colour0,bg=colour8,noitalics]\
#[fg=colour0,bg=colour8] #I \
#[fg=colour0,bg=colour8] #W \
#[fg=colour0,bg=colour8]"
# }}}

# Mappings {{{

bind -n C-Tab next-window;
bind -n C-S-BTab previous-window;

bind - split-window -v -c '#{pane_current_path}'

bind _ split-window -h -c '#{pane_current_path}'

bind c new-window -c '#{pane_current_path}'

# edit configuration
bind e new-window -n "tmux.conf" "sh -c 'nvim ~/.config/tmux/tmux.conf && tmux source ~/.config/tmux/tmux.conf && tmux display \"~/.config/tmux/tmux.conf sourced\"'"

# reload configuration
bind r source-file ~/.config/tmux/tmux.conf \; display '~/.config/tmux/tmux.conf sourced'

# pane navigation
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

unbind i

bind-key -r i run-shell "tmux neww ~/.config/tmux/scripts/cht.sh"

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R

bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h' "run-shell '~/.local/bin/tmux-tools focus-pane left || exit 0'"
bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j' "run-shell '~/.local/bin/tmux-tools focus-pane bottom || exit 0'"
bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k' "run-shell '~/.local/bin/tmux-tools focus-pane top || exit 0'"
bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l' "run-shell '~/.local/bin/tmux-tools focus-pane right || exit 0'"

bind -n 'M-1' select-window -t 1
bind -n 'M-2' select-window -t 2
bind -n 'M-3' select-window -t 3
bind -n 'M-4' select-window -t 4
bind -n 'M-5' select-window -t 5
bind -n 'M-6' select-window -t 6
bind -n 'M-7' select-window -t 7
bind -n 'M-8' select-window -t 8
bind -n 'M-9' select-window -t 9
bind -n 'M-0' select-window -t 0

bind -n M-H if-shell "$is_vim" 'send-keys M-H' 'run-shell "~/.local/bin/tmux-tools wm left"'
bind -n M-J if-shell "$is_vim" 'send-keys M-J' 'run-shell "~/.local/bin/tmux-tools wm bottom"'
bind -n M-K if-shell "$is_vim" 'send-keys M-K' 'run-shell "~/.local/bin/tmux-tools wm top"'
bind -n M-L if-shell "$is_vim" 'send-keys M-L' 'run-shell "~/.local/bin/tmux-tools wm right"'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

unbind Space

bind -n M-Left select-window -p
bind -n M-Right select-window -n

bind -r p select-window -l

bind -r f resize-pane -Z

# move status line to top

# For vi copy mode bindings
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"

bind-key -T copy-mode-vi i send-keys -X cancel

bind-key -r [ copy-mode
bind-key -r ? copy-mode \; command-prompt -T search -p "(search up)" { send-keys -X search-backward "%%" }
bind-key -r / copy-mode \; command-prompt -T search -p "(search down)" { send-keys -X search-forward "%%" }
# For emacs copy mode bindings
# bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xsel -bi"

bind -n C-M-h if-shell "$is_vim" 'send-keys C-M-h' 'resize-pane -L 1'
bind -n C-M-j if-shell "$is_vim" 'send-keys C-M-j' 'resize-pane -D 1'
bind -n C-M-k if-shell "$is_vim" 'send-keys C-M-k' 'resize-pane -U 1'
bind -n C-M-l if-shell "$is_vim" 'send-keys C-M-l' 'resize-pane -R 1'

bind-key -T copy-mode-vi C-M-h resize-pane -L 1
bind-key -T copy-mode-vi C-M-j resize-pane -D 1
bind-key -T copy-mode-vi C-M-k resize-pane -U 1
bind-key -T copy-mode-vi C-M-l resize-pane -R 1

# Create project session
bind -r o display-popup -h 15 -w 30 -E 'python3 ~/.config/tmux/scripts/session-load.py'

# Session save
bind -r S display-popup -h 3 -w 50 -E 'python3 ~/.config/tmux/scripts/session-save.py'

# Move pane
bind -r j display-popup -h 10 -w 40 -E '~/.config/tmux/scripts/joiner.sh'

unbind m
# bind -r m run "~/.config/tmux/scripts/move-window.sh"

# 4-way split

bind -r N run-shell "~/.config/tmux/scripts/split.sh 4"

# }}}

# Mouse stuff # {{{
bind-key -T root WheelUpPane \
    if-shell -Ft= '#{?mouse_any_flag,1,#{pane_in_mode}}' \
    'send -Mt=' 'if-shell -t= "#{?alternate_on,true,false} || \
        echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
    "send -t= Up Up Up" "copy-mode -t="'

bind-key -T root WheelDownPane \
    if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' 'if-shell -t= "#{?alternate_on,true,false} || \
        echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
    "send -t= Down Down Down" "send -Mt="'

bind -n MouseDrag1Pane \
    if-shell "$is_vim" {
        send-keys -M
    } {
        if -Ft= '#{mouse_any_flag}' \
            'if -Ft= \"#{pane_in_mode}\" \
                \"copy-mode -eM\" \
                \"send-keys -M\"' \
        'copy-mode -eM'
    }
# }}}
 
# vim: ft=tmux
