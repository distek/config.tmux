# tmux config

# General # {{{
if-shell -b '[ "$(uname)" = "Darwin" ]' {
    set default-shell /usr/local/bin/zsh
    set -g default-terminal "screen-256color"
}

if-shell -b '[ "$(uname)" = "Linux" ]' {
    set default-shell /bin/zsh
    set -g default-terminal "xterm-256color"
}

set -ga terminal-overrides ",*256col*:Tc"

setw -g xterm-keys on

set -sg escape-time 0

set -sg repeat-time 0

set -s focus-events on

set -g mouse on

set -q -g status-utf8 on

setw -q -g utf8 on


# edit configuration
bind e new-window -n "tmux.conf" "sh -c '\${EDITOR:-vim} ~/.config/tmux/tmux.conf && tmux source ~/.config/tmux/tmux.conf && tmux display \"~/.config/tmux/tmux.conf sourced\"'"

# reload configuration
bind r source-file ~/.config/tmux/tmux.conf \; display '~/.config/tmux/tmux.conf sourced'

# Set the history limit so we get lots of scrollback.
setw -g history-limit 50000000

tmux_conf_copy_to_os_clipboard=true

set -g status-keys vi
set -g mode-keys vi

set -g status-position top
 # }}}

# Display # {{{
# start windows numbering at 1
set -g base-index 1

# make pane numbering consistent with windows
setw -g pane-base-index 1

# rename window to reflect current program
setw -g automatic-rename on

# renumber windows when a window is closed
set -g renumber-windows on

# set terminal title
set -g set-titles on

# slightly longer pane indicators display time
set -g display-panes-time 800

# slightly longer status messages display time
set -g display-time 1000

# redraw status line every 10 seconds
set -g status-interval 10

# clear both screen and history

# activity
set -g monitor-activity on
set -g visual-activity off

# Start window and pane indices at 1.
set -g base-index 1
set -g pane-base-index 0

# Length of tmux status line
set -g status-left-length 30
set -g status-right-length 150

set-option -g status "on"

bgColor=colour235

# Default statusbar color
set-option -g status-style bg=$bgColor,fg=colour223 # bg=bg1, fg=fg1

set-window-option -g window-active-style fg=default,bg=terminal
set-window-option -g window-style fg=default,bg=terminal

# Default window title colors
set-window-option -g window-status-style bg=colour3,fg=$bgColor # bg=yellow, fg=bg1

# Default window with an activity alert
set-window-option -g window-status-activity-style bg=$bgColor,fg=colour248 # bg=bg1, fg=fg3

# Active window title colors
set-window-option -g window-status-current-style bg=red,fg=$bgColor # fg=bg1

# Set active pane border color
set-option -g pane-active-border-style bg=$bgColor,fg=colour3

# Set inactive pane border color
set-option -g pane-border-style bg=$bgColor,fg=colour8

set-option -g pane-border-lines heavy
set-option -g popup-border-lines heavy
set -g pane-border-status top

set -g pane-border-format "#[fg=colour5, bg=colour0][ \
#[fg=colour15, bg=colour0]#P\
#[fg=colour5, bg=colour0] ][ \
#[fg=colour15, bg=colour0]#{pane_current_command}\
#[fg=colour5, bg=colour0] ][ \
#[fg=colour15, bg=colour0]#{pane_current_path}\
#[fg=colour5, bg=colour0] ]"

# Message info
set-option -g message-style bg=colour239,fg=colour7 # bg=bg2, fg=fg1

# Writing commands inactive
set-option -g message-command-style bg=colour239,fg=colour223 # bg=fg3, fg=bg1

# Pane number display
set-option -g display-panes-active-colour colour1 #fg2
set-option -g display-panes-colour colour2 #bg1

# Clock
set-window-option -g clock-mode-colour colour10

# Bell
set-window-option -g window-status-bell-style bg=colour167,fg=colour235 # bg=red, fg=bg

set-option -g status-left "\
#[fg=$bgColor, bg=colour241]#{?client_prefix,#[bg=colour11],} \
#[fg=colour241, bg=$bgColor]#{?client_prefix,#[fg=colour11],}#{?window_zoomed_flag, 🔍,} \
#[fg=colour5]#S "

set-option -g status-right "\
 #( ~/.config/tmux/scripts/tmux-battery.sh)\
#[fg=colour246, bg=$bgColor] %b %d %y |\
#[fg=colour3] %H:%M \
#[fg=colour248, bg=colour239]"

set-window-option -g window-status-current-format "\
#[fg=$bgColor, bg=colour2]\
#[fg=$bgColor, bg=colour2] #I \
#[fg=$bgColor, bg=colour2] #W \
#[fg=colour2, bg=$bgColor]"

set-window-option -g window-status-format "\
#[fg=$bgColor,bg=colour239,noitalics]\
#[fg=colour7,bg=colour239] #I \
#[fg=colour7, bg=colour239] #W \
#[fg=colour239, bg=$bgColor]"

#############################
############# Tmux Vars
#############################

# $(echo $USER) - shows the current username
# %a --> Day of week (Mon)
# %A --> Day of week Expanded (Monday)

# %b --> Month (Jan)
# %d --> Day (31)
# %Y --> Year (2017)

# %D --> Month/Day/Year (12/31/2017)
# %v --> Day-Month-Year (31-Dec-2017)

# %r --> Hour:Min:Sec AM/PM (12:30:27 PM)
# %T --> 24 Hour:Min:Sec (16:30:27)
# %X --> Hour:Min:Sec (12:30:27)
# %R --> 24 Hour:Min (16:30)
# %H --> 24 Hour (16)
# %l --> Hour (12)
# %M --> Mins (30)
# %S --> Seconds (09)
# %p --> AM/PM (AM)

# For a more complete list view: https://linux.die.net/man/3/strftime

#$bgColor (black)
#colour1 (red)
#colour2 (green)
#colour3 (yellow)
#colour4 (blue)
#colour7 (white)
#colour5 colour6 colour7 colour8 colour9 colour10 colour11 colour12 colour13 colour14 colour15 colour16 colour17

#D ()
#F ()
#H (hostname)
#I (window index)
#P ()
#S (session index)
#T (pane title)
#W (currnet task like vim if editing a file in vim or zsh if running zsh)
#
# }}}

# Mappings {{{

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# split current window horizontally
bind - split-window -v -c '#{pane_current_path}'
# split current window vertically
bind _ split-window -h -c '#{pane_current_path}'

bind c new-window -c '#{pane_current_path}'

# pane navigation
# move left
bind -r h select-pane -L
# move down
bind -r j select-pane -D
# move up
bind -r k select-pane -U
# move right
bind -r l select-pane -R
# swap current pane with the next one
bind > swap-pane -D
# swap current pane with the previous one
bind < swap-pane -U

unbind i
bind-key -r i run-shell "tmux neww ~/.config/tmux/scripts/cht.sh"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# leave these
unbind n
unbind p

unbind C-b
set -g prefix M-Space

bind -n M-1 run-shell "~/.config/tmux/scripts/select-window.sh 1" 
bind -n M-2 run-shell "~/.config/tmux/scripts/select-window.sh 2"
bind -n M-3 run-shell "~/.config/tmux/scripts/select-window.sh 3"
bind -n M-4 run-shell "~/.config/tmux/scripts/select-window.sh 4"
bind -n M-5 run-shell "~/.config/tmux/scripts/select-window.sh 5"
bind -n M-6 run-shell "~/.config/tmux/scripts/select-window.sh 6"
bind -n M-7 run-shell "~/.config/tmux/scripts/select-window.sh 7"
bind -n M-8 run-shell "~/.config/tmux/scripts/select-window.sh 8"
bind -n M-9 run-shell "~/.config/tmux/scripts/select-window.sh 9"
bind -n M-0 run-shell "~/.config/tmux/scripts/select-window.sh 10"
bind -r f resize-pane -Z

bind -r M-! run-shell "~/.config/tmux/scripts/move-pane.sh 1"
bind -r M-@ run-shell "~/.config/tmux/scripts/move-pane.sh 2"
bind -r M-# run-shell "~/.config/tmux/scripts/move-pane.sh 3"
bind -r M-$ run-shell "~/.config/tmux/scripts/move-pane.sh 4"
bind -r M-% run-shell "~/.config/tmux/scripts/move-pane.sh 5"
bind -r M-^ run-shell "~/.config/tmux/scripts/move-pane.sh 6"
bind -r M-& run-shell "~/.config/tmux/scripts/move-pane.sh 7"
bind -r M-* run-shell "~/.config/tmux/scripts/move-pane.sh 8"
bind -r M-( run-shell "~/.config/tmux/scripts/move-pane.sh 9"
bind -r M-) run-shell "~/.config/tmux/scripts/move-pane.sh 10"

# move status line to top

# For vi copy mode bindings
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xsel -bi"
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -bi"

bind-key -T copy-mode-vi i send-keys -X cancel

# For emacs copy mode bindings
# bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xsel -bi"

bind -n 'C-M-h' if-shell "$is_vim" 'send-keys C-M-h' 'resize-pane -L 1'
bind -n 'C-M-j' if-shell "$is_vim" 'send-keys C-M-j' 'resize-pane -D 1'
bind -n 'C-M-k' if-shell "$is_vim" 'send-keys C-M-k' 'resize-pane -U 1'
bind -n 'C-M-l' if-shell "$is_vim" 'send-keys C-M-l' 'resize-pane -R 1'

bind-key -T copy-mode-vi C-M-h resize-pane -L 1
bind-key -T copy-mode-vi C-M-j resize-pane -D 1
bind-key -T copy-mode-vi C-M-k resize-pane -U 1
bind-key -T copy-mode-vi C-M-l resize-pane -R 1

bind-key -n M-H if-shell "$is_vim" 'send-keys M-H' 'run-shell "~/.config/tmux/scripts/wm.sh left"'
bind-key -n M-J if-shell "$is_vim" 'send-keys M-J' 'run-shell "~/.config/tmux/scripts/wm.sh down"'
bind-key -n M-K if-shell "$is_vim" 'send-keys M-K' 'run-shell "~/.config/tmux/scripts/wm.sh up"'
bind-key -n M-L if-shell "$is_vim" 'send-keys M-L' 'run-shell "~/.config/tmux/scripts/wm.sh right"'

# Create project session
bind -r o display-popup -h 15 -w 30 -E '~/.config/tmux/scripts/session-load.sh'

# Session save
bind -r S display-popup -h 3 -w 50 -E '~/.config/tmux/scripts/session-save.sh'

# Move pane
bind -r j display-popup -h 40 -w 40 -E '~/.config/tmux/scripts/joiner.sh'

# 4-way split

bind -r N run-shell "~/.config/tmux/scripts/split.sh 4"

# }}}

# Mouse stuff # {{{
# Emulate scrolling by sending up and down keys if these commands are running in the pane
#tmux_commands_with_legacy_scroll="vim less more man"
#
bind-key -T root WheelUpPane \
    if-shell -Ft= '#{?mouse_any_flag,1,#{pane_in_mode}}' \
    'send -Mt=' 'if-shell -t= "#{?alternate_on,true,false} || \
        echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
    "send -t= Up Up Up" "copy-mode -t="'
bind-key -T root WheelDownPane \
    if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' 'if-shell -t= "#{?alternate_on,true,false} || \
        echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
    "send -t= Down Down Down" "send -Mt="'

# this line changes the default binding of MouseDrag1Pane, the only difference
# is that we use `copy-mode -eM` instead of `copy-mode -M`, so that WheelDownPane
# can trigger copy-mode to exit when copy-mode is entered by MouseDrag1Pane
bind -n MouseDrag1Pane \
    if -Ft= '#{mouse_any_flag}' \
        'if -Ft= \"#{pane_in_mode}\" \
            \"copy-mode -eM\" \
            \"send-keys -M\"' \
    'copy-mode -eM'
# }}}
